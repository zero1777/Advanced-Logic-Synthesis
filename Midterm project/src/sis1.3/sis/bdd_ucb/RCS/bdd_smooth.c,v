head	1.6;
access;
symbols
	sis1-1:1.5;
locks;
comment	@ * @;


1.6
date	92.09.21.23.30.31;	author sis;	state Exp;
branches;
next	1.5;

1.5
date	92.05.06.18.51.03;	author sis;	state Exp;
branches;
next	1.4;

1.4
date	92.04.17.21.31.15;	author sis;	state Exp;
branches;
next	1.3;

1.3
date	92.02.12.18.52.22;	author sis;	state Exp;
branches;
next	1.2;

1.2
date	92.02.12.15.57.55;	author sis;	state Exp;
branches;
next	1.1;

1.1
date	92.01.08.17.34.29;	author sis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Updates from Tom Shiple - this is BDD package release 2.4.
@
text
@/*
 * Revision Control Information
 *
 * $Source: /vol/hyper/hyper3/shiple/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: shiple $
 * $Revision: 1.2 $
 * $Date: 1992/09/19 02:42:23 $
 *
 */
#include <stdio.h>	/* for BDD_DEBUG_LIFESPAN */

#include "util.h"
#include "array.h"
#include "st.h"

#include "bdd.h"
#include "bdd_int.h"

/*
 * Revision Control Information
 *
 * $Source: /vol/hyper/hyper3/shiple/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: shiple $
 * $Revision: 1.2 $
 * $Date: 1992/09/19 02:42:23 $
 * $Log: bdd_smooth.c,v $
 * Revision 1.2  1992/09/19  02:42:23  shiple
 * Version 2.4
 * Prefaced compile time debug switches with BDD_. Added typecast to void to some function calls.
 * Added adhoc_ops stats. In smooth, restructured code so that case where (fID > top_varid)
 * is properly inserted into the cache and accounted for.
 *
 * Revision 1.1  1992/07/29  00:26:52  shiple
 * Initial revision
 *
 * Revision 1.5  1992/05/06  18:51:03  sis
 * SIS release 1.1
 *
 * Revision 1.4  1992/04/17  21:31:15  sis
 * Fixed a core leak.
 *
 * Revision 1.3  92/02/12  18:52:22  sis
 * This is the file Shiple sent with the core leak fix in
 * bdd_smooth.
 * 
 * Revision 1.2  1992/02/13  00:16:42  shiple
 * Added call to array_free for array vars, in function bdd_smooth.
 *
 * Revision 1.1  1991/03/27  14:35:34  shiple
 * Initial revision
 *
 *
 */

static bdd_node *smooth();

/*
 *    bdd_smooth - the smoothing function
 *
 *    return the new bdd (external pointer)
 */
bdd_t *
bdd_smooth(f, var_array)
bdd_t *f;
array_t *var_array;	/* of bdd_t* */
{
    bdd_manager *manager;
    bdd_safeframe frame;
    bdd_safenode real_f, ret;
    array_t *vars;
    bdd_t *h;

    if (f == NIL(bdd_t))
	fail ("bdd_smooth: invalid BDD");

    BDD_ASSERT( ! f->free );

    manager = f->bdd;

    /*
     *    After the input is checked for correctness, start the safe frame
     *    f and g are already external pointers so they need not be protected
     */
    bdd_safeframe_start(manager, frame);
    bdd_safenode_declare(manager, real_f);
    bdd_safenode_declare(manager, ret);

    real_f.node = f->node;

    vars = bdd_get_sorted_varids(var_array);
    (void) bdd_adhoccache_init(manager);

    ret.node = smooth(manager, f->node, 0, vars);

    /*
     *    End the safe frame and return the result
     */
    (void) bdd_adhoccache_uninit(manager);
    (void) array_free(vars);
    bdd_safeframe_end(manager);
    h = bdd_make_external_pointer(manager, ret.node, "bdd_smooth");

#if defined(BDD_FLIGHT_RECORDER) /* { */
    (void) fprintf(manager->debug.flight_recorder.log, "%d <- bdd_smooth(%d, { ",
	    bdd_index_of_external_pointer(h),
	    bdd_index_of_external_pointer(f));
    {
	int i;

	for (i=0; i<array_n(var_array); i++) {
	    bdd_t *v;
	    
	    v = array_fetch(bdd_t *, var_array, i);
	    (void) fprintf(manager->debug.flight_recorder.log, "%d%s",
		    bdd_index_of_external_pointer(v),
		    i+1 == array_n(var_array) ? " } )\n": ", ");
	}
    }
#endif /* } */

    return h;
}

/*
 *    smooth - recursively perform the smoothing
 *
 *    return the result of the reorganization
 */
static bdd_node *
smooth(manager, f, index, vars)
bdd_manager *manager;
bdd_node *f;
int index;
array_t *vars;
{
    bdd_safeframe frame;
    bdd_safenode safe_f;
    bdd_safenode f_T, f_E;
    bdd_safenode sm_T, sm_E;
    bdd_safenode ret, var;
    bdd_variableId fId, top_varId, last_varId;

    bdd_safeframe_start(manager, frame);
    bdd_safenode_link(manager, safe_f, f);
    bdd_safenode_declare(manager, ret);
    bdd_safenode_declare(manager, f_T);
    bdd_safenode_declare(manager, f_E);
    bdd_safenode_declare(manager, sm_T);
    bdd_safenode_declare(manager, sm_E);
    bdd_safenode_declare(manager, var);

    manager->heap.stats.adhoc_ops.calls++; 

    if (index >= array_n(vars)) {
	/*
	 *    no more variables to smooth
	 */
	manager->heap.stats.adhoc_ops.returns.trivial++; 
	bdd_safeframe_end(manager);
	return f;
    }
    fId = BDD_REGULAR(f)->id;
    last_varId = array_fetch(int, vars, array_n(vars) - 1);

    if (fId > last_varId) {
	/* 
	 * if f's id above the last possible smoothing variable, return f 
	 * takes also care of the case f == CONSTANT
	 */
	manager->heap.stats.adhoc_ops.returns.trivial++; 
	bdd_safeframe_end(manager);
	return f;
    }

    if (bdd_adhoccache_lookup(manager, f, NIL(bdd_node), index, &ret.node)) {
	/*
	 *    The answer was already in the cache, so just return it.
	 */
	manager->heap.stats.adhoc_ops.returns.cached++; 
	bdd_safeframe_end(manager);
	return (ret.node);
    }

    (void) bdd_get_branches(f, &f_T.node, &f_E.node);

    /* from now on, everything has to be protected */
    top_varId = array_fetch(int, vars, index);
    if (fId > top_varId) {
	ret.node = smooth(manager, f, index + 1, vars);
    } else if (fId == top_varId) {
	/*
	 *    smooth(ITE(f_T, 1, f_E), g_T)
	 */
	sm_T.node = smooth(manager, f_T.node, index + 1, vars);
	sm_E.node = smooth(manager, f_E.node, index + 1, vars);
	ret.node = bdd__ITE_(manager, sm_T.node, BDD_ONE(manager), sm_E.node);
    } else {			/* fId < top_varId */
	/*
	 *    ITE(f, smooth(f_T, g), smooth(f_E, g))
	 */
	sm_T.node = smooth(manager, f_T.node, index, vars);
	sm_E.node = smooth(manager, f_E.node, index, vars);
	var.node = bdd_find_or_add(manager, fId, BDD_ONE(manager), BDD_ZERO(manager));
	ret.node = bdd__ITE_(manager, var.node, sm_T.node, sm_E.node);
    }

    (void) bdd_adhoccache_insert(manager, f, NIL(bdd_node), index, ret.node);
    manager->heap.stats.adhoc_ops.returns.full++; 
    bdd_safeframe_end(manager);
    return (ret.node);
}
@


1.5
log
@SIS release 1.1
@
text
@d4 4
a7 4
 * $Source: /vol/opua/opua2/sis/sis-1.1/common/src/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: sis $
 * $Revision: 1.4 $
 * $Date: 1992/04/17 21:31:15 $
d10 1
a10 1
#include <stdio.h>	/* for DEBUG_LIFESPAN */
d22 4
a25 4
 * $Source: /vol/opua/opua2/sis/sis-1.1/common/src/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: sis $
 * $Revision: 1.4 $
 * $Date: 1992/04/17 21:31:15 $
d27 12
d91 1
a91 1
    bdd_adhoccache_init(manager);
d98 1
a98 1
    bdd_adhoccache_uninit(manager);
d103 2
a104 2
#if defined(FLIGHT_RECORDER) /* { */
    fprintf(manager->debug.flight_recorder.log, "%d <- bdd_smooth(%d, { ",
d114 1
a114 1
	    fprintf(manager->debug.flight_recorder.log, "%d%s",
d152 2
d158 1
d170 1
a174 2
    bdd_get_branches(f, &f_T.node, &f_E.node);

d179 1
d184 2
a196 1
	bdd_adhoccache_insert(manager, f, NIL(bdd_node), index, ret.node);
a204 1
	bdd_adhoccache_insert(manager, f, NIL(bdd_node), index, ret.node);
d207 2
@


1.4
log
@Fixed a core leak.
@
text
@d6 2
a7 2
 * $Revision: 1.3 $
 * $Date: 92/02/12 18:52:22 $
d24 6
a29 3
 * $Revision: 1.3 $
 * $Date: 92/02/12 18:52:22 $
 * $Log:	bdd_smooth.c,v $
@


1.3
log
@This is the file Shiple sent with the core leak fix in
bdd_smooth.
@
text
@d4 4
a7 4
 * $Source$
 * $Author$
 * $Revision$
 * $Date$
d22 9
a30 5
 * $Source: /vol/hyper/hyper3/shiple/sis/bdd_old/RCS/bdd_smooth.c,v $
 * $Author: shiple $
 * $Revision: 1.2 $
 * $Date: 1992/02/13 00:16:42 $
 * $Log: bdd_smooth.c,v $
@


1.2
log
@Fixed a core leak in bdd_smooth.  The array vars
is now freed before the function returns.
@
text
@d4 4
a7 4
 * $Source: /vol/opua/opua2/sis/sis-1.1/common/src/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: sis $
 * $Revision: 1.1 $
 * $Date: 92/01/08 17:34:29 $
d22 9
a30 6
 * $Source: /vol/opua/opua2/sis/sis-1.1/common/src/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: sis $
 * $Revision: 1.1 $
 * $Date: 92/01/08 17:34:29 $
 * $Log:	bdd_smooth.c,v $
 * Revision 1.1  92/01/08  17:34:29  sis
d32 1
a32 4
 * 
 * Revision 1.1  91/03/27  14:35:34  shiple
 * Initial revision
 * 
d80 1
a101 1
    array_free(vars);
@


1.1
log
@Initial revision
@
text
@d4 4
a7 4
 * $Source$
 * $Author$
 * $Revision$
 * $Date$
d22 2
a23 2
 * $Source: /ic3/shiple/sis/bdd/RCS/bdd_smooth.c,v $
 * $Author: shiple $
d25 1
a25 1
 * $Date: 91/03/27 14:35:34 $
d27 3
d101 1
@
